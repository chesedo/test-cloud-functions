# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python37:
      python.version: '3.7'
      python.runtime: 'python37'
    # Enable once out of beta
    # Python38:
    #   python.version: '3.8'
    #   python.runtime: 'python38'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- task: DownloadSecureFile@1
  name: keyFile
  inputs:
    secureFile: 'eta-testing-azure.json'
  displayName: 'Download key file'

- script: |
    python -m pip install --upgrade pip
    pip install poetry
    poetry install
  displayName: 'Install dependencies'
  workingDirectory: emailer

- script: |
    poetry run task format --check
  displayName: 'Format'
  workingDirectory: emailer

- script: |
    poetry run task lint
  displayName: 'Lint'
  workingDirectory: emailer

- script: |
    poetry run task test --ignore=tests/ --cov-report html
  displayName: 'Unit Tests'
  workingDirectory: emailer

- script: |
    poetry run task test --cov-report html --cov-append tests/test_emailer.py
  env:
    GOOGLE_APPLICATION_CREDENTIALS: $(keyFile.secureFilePath)
    EMAIL_SERVER: $(EmailServer)
    EMAIL_USERNAME: $(EmailUsername)
    EMAIL_PASSWORD: $(EmailPassword)
    EMAIL_ADDRESS: $(EmailAddress)
    SENDGRID_API_KEY: $(SendGridKey)
  displayName: 'Integration Tests'
  workingDirectory: emailer

- script: |
    poetry export -f requirements.txt --without-hashes -o requirements.txt
    gcloud auth activate-service-account --key-file $(keyFile.secureFilePath)
    poetry run task deploy --runtime $(python.runtime) --project $TEST_PROJECT --quiet
  env:
    TEST_PROJECT: $(TestProject)
    SENDGRID_API_KEY: $(SendGridKey)
  displayName: 'Deploy Tests'
  workingDirectory: emailer

- script: |
    poetry run task test --no-cov tests/test_events.py
  env:
    GOOGLE_APPLICATION_CREDENTIALS: $(keyFile.secureFilePath)
    EMAIL_SERVER: $(EmailServer)
    EMAIL_USERNAME: $(EmailUsername)
    EMAIL_PASSWORD: $(EmailPassword)
    EMAIL_ADDRESS: $(EmailAddress)
  displayName: 'Events Tests'
  workingDirectory: emailer

- script: |
    poetry run task deploy_clean --project $TEST_PROJECT  --quiet
  env:
    TEST_PROJECT: $(TestProject)
  displayName: 'Deploy Tests (Cleanup)'
  workingDirectory: emailer
